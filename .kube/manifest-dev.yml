---
apiVersion: v1
kind: Secret
metadata:
  name: ${APP_NAME}-backend
type: Opaque
stringData:
  AUTH_GITHUB_CLIENT_SECRET: ${AUTH_GITHUB_CLIENT_SECRET}
  AUTH_OKTA_CLIENT_SECRET: ${AUTH_OKTA_CLIENT_SECRET}
  KUBE_SA_US_DEV: ${KUBE_SA_US_DEV}
  KUBE_SA_US_PROD: ${KUBE_SA_US_PROD}
  KUBE_SA_AKS_US_DEV: ${KUBE_SA_AKS_US_DEV}
  DYNATRACE_API_TOKEN: ${DYNATRACE_API_TOKEN}

---
apiVersion: v1
kind: Secret
metadata:
  name: ${APP_NAME}-backend-github-app-credentials
type: Opaque
data:
  github-app-credentials.yaml: ${GITHUB_APP_CREDS}

---
apiVersion: v1
kind: Secret
metadata:
  name: ${APP_NAME}-postgresql
type: Opaque
stringData:
  APP_CONFIG_backend_database_connection_password: ${BACKSTAGE_DB_AKS_PASS}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${APP_NAME}-auth
data:
  AUTH_GITHUB_CLIENT_ID: ${AUTH_GITHUB_CLIENT_ID}
  AUTH_OKTA_CLIENT_ID: ${AUTH_OKTA_CLIENT_ID}
  AUTH_OKTA_CLIENT_URL: ${AUTH_OKTA_CLIENT_URL}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${APP_NAME}-app-config
data:
  app-config.production.yaml: |
    backend:
      database:
        client: 'pg'
        connection:
          host: '${ENVIRONMENT}-${APP_NAME}.postgres.database.azure.com'
          port: '5432'
          user: ${BACKSTAGE_DB_AKS_USER}@${ENVIRONMENT}-${APP_NAME}
          database: 'postgres'
          # https://node-postgres.com/features/ssl
          # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
          # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
          ssl: true
          #   ca: # if you have a CA file and want to verify it you can uncomment this section
          #$file: <file-path>/ca/server.crt
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${APP_NAME}-app-env
data:
  APP_CONFIG_app_baseUrl: 'https://${DOMAIN_NAME}'
  APP_CONFIG_app_title: 'McKesson Developer Portal ${ENVIRONMENT}'
  APP_CONFIG_backend_baseUrl: 'https://${DOMAIN_NAME}'
  APP_CONFIG_backend_cors_origin: 'https://${DOMAIN_NAME}'
  APP_CONFIG_techdocs_storageUrl: 'https://${DOMAIN_NAME}/api/techdocs/static/docs'
  APP_CONFIG_techdocs_requestUrl: 'https://${DOMAIN_NAME}/api/techdocs'
  APP_CONFIG_auth_providers_github_development_appOrigin: 'https://${DOMAIN_NAME}/'
  APP_CONFIG_auth_providers_okta_development_appOrigin: 'https://${DOMAIN_NAME}/'
  APP_CONFIG_organization_name: 'McKesson'
  APP_CONFIG_techdocs_publisher_googleGcs_bucketName: 'mckesson-developerservices-developerportal-techdocs-${ENVIRONMENT}' # need to switch to Azure Blob from google docs 

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${APP_NAME}-backend
  labels:
    backstage.io/kubernetes-id: ${APP_NAME}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${APP_NAME}
      component: backend
  template:
    metadata:
      labels:
        app: ${APP_NAME}
        component: backend
        backstage.io/kubernetes-id: ${APP_NAME}
    spec:
      imagePullSecrets:
        - name: ${IMAGE_PULL_SECRET}
      containers:
        - name: ${APP_NAME}
          image: ${BACKEND_IMAGE_NAME}
          ports:
            - containerPort: 7007
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 2000m
              memory: 1024Mi
            requests:
              cpu: 500m
              memory: 512Mi
          envFrom:
            - secretRef:
                name: ${APP_NAME}-backend
            - configMapRef:
                name: ${APP_NAME}-app-env
            - configMapRef:
                name: ${APP_NAME}-auth
          env:
            - name: NODE_ENV
              value: 'development'
            - name: APP_CONFIG_backend_database_connection_password
              #value: 'someNOTREALpassword'
              valueFrom:
                secretKeyRef:
                  name: ${APP_NAME}-postgresql
                  key: APP_CONFIG_backend_database_connection_password
          volumeMounts:
            - name: github-app-credentials
              mountPath: /app/github-app-credentials.yaml
              subPath: github-app-credentials.yaml
            - name: app-config
              mountPath: /app/app-config.production.yaml
              subPath: app-config.production.yaml
      volumes:
        - name: github-app-credentials
          secret:
            secretName: ${APP_NAME}-backend-github-app-credentials
        - name: app-config
          configMap:
            name: ${APP_NAME}-app-config

---
apiVersion: v1
kind: Service
metadata:
  name: ${APP_NAME}-backend-svc
  labels:
    backstage.io/kubernetes-id: ${APP_NAME}
spec:
  ports:
    - port: 80
      targetPort: 7007
  selector:
    app: ${APP_NAME}
    component: backend
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${APP_NAME}-frontend
  labels:
    backstage.io/kubernetes-id: ${APP_NAME}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${APP_NAME}
      component: frontend
  template:
    metadata:
      labels:
        app: ${APP_NAME}
        component: frontend
        backstage.io/kubernetes-id: ${APP_NAME}
    spec:
      imagePullSecrets:
        - name: ${IMAGE_PULL_SECRET}
      containers:
        - name: ${APP_NAME}-frontend
          image: ${FRONTEND_IMAGE_NAME}
          ports:
            - containerPort: 80
          imagePullPolicy: Always
          resources:
            limits:
              memory: 256Mi
            requests:
              memory: 128Mi
          envFrom:
            - configMapRef:
                name: ${APP_NAME}-app-env
          volumeMounts:
            - name: app-config
              mountPath: /usr/share/nginx/html/static/app-config.production.yaml
              subPath: app-config.production.yaml
      volumes:
        - name: app-config
          configMap:
            name: ${APP_NAME}-app-config

---
apiVersion: v1
kind: Service
metadata:
  name: ${APP_NAME}-frontend-svc
  labels:
    backstage.io/kubernetes-id: ${APP_NAME}
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    app: ${APP_NAME}
    component: frontend
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ${APP_NAME}-ingress
  annotations:
    kubernetes.io/ingress.class: nginx-internal
    nginx.ingress.kubernetes.io/ssl-redirect: 'false'
  labels:
    backstage.io/kubernetes-id: ${APP_NAME}
spec:
  tls:
    - hosts:
        - ${DOMAIN_NAME}
  rules:
    - host: ${DOMAIN_NAME}
      http:
        paths:
          - path: /
            backend:
              service:
                name: ${APP_NAME}-frontend-svc
                port:
                  number: 80
            pathType: ImplementationSpecific
          - path: /api
            backend:
              service:
                name: ${APP_NAME}-backend-svc
                port:
                  number: 80
            pathType: Prefix
